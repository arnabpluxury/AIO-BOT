/**
 * @file This file contain the AnimeKitsu class, used to get anime informations from the Kitsu.app API.
 */
import { IKitsuAnimeFind, IKitsuAnimeList } from "./interfaces/anime/params.js";
import { IKitsuAnime, IKitsuAnimeSingle, IKitsuEpisode, IKitsuHandleError } from "./interfaces/anime/result.js";
/**
 * @class
 * @since 1.0.2
 * @description AnimeKitsu is a class that's using the Kitsu.app API, with this class you can find animes informations in different ways
 * @example
 * Basic usage:
 * ```js
 * // CJS
 * const { AnimeKitsu } = require("aniki/kitsu")
 * // JS ESM or TS
 * import { AnimeKitsu } from "aniki/kitsu";
 *
 * const anime = new AnimeKitsu();
 *
 * // Normal
 * anime.find({ query: "Oshi no Ko" }).then(a => console.log(a.data[0]));
 *
 * // Find by an id
 * anime.findById(3600).then(a => console.log(a.data));
 *
 * // Handling errors
 *
 * anime.find(
  { query: "Oshi no ko" },
  async ({ apiError, moduleError }, status) => {
    if (apiError) console.error(await apiError);
    if (moduleError) console.error(await moduleError);
  }
);

 *
 * // Best practice to avoid using .then() method is by using asynchronous function
 *
 * async function getAnime(query) {
 * // ...
 *  const a = await anime.find({ query: query })
 * // ...
 * }
 *
 * ```
 */
declare class AnimeKitsu {
    private defaultHandleError;
    /**
     * @method
     * @since 1.0.2
     * @param params - The parameters for the request.
     * @description The find method is used to find animes with different parameters.
     * @returns {Promise<IKitsuAnime | undefined>} - Returns a Promise with the IKitsuAnime inteface.
     * @example
     * ```js
     * // Searching an anime
     * anime.find({ query: "Oshi no ko", offset: 0 }).then(r=> console.log(r.data[0]))
     * ```
     */
    find(params: IKitsuAnimeFind, handleError?: IKitsuHandleError): Promise<IKitsuAnime | undefined>;
    /**
     * @method
     * @since 1.3.0
     * @param {number | `${number}`} id - The ID of the anime.
     * @description Get an anime with the ID.
     * @returns {Promise<IKitsuAnimeSingle | undefined>} - Return a Promise.
     * @example
     * ```js
     * anime.findById(30).then(r => console.log(r.data.id));
     * ```
     */
    findById(id: number | `${number}`, handleError?: IKitsuHandleError): Promise<IKitsuAnimeSingle | undefined>;
    /**
     *
     * @method
     * @since 1.0.2
     * @param params - The parameters for the request.
     * @description Get an list of animes, you can choose the page, and the number of animes per page.
     * @returns {Promise<IKitsuAnime | undefined>} - Return a Promise.
     * @example
     * ```js
     * anime.list({ offset: 0, perPage: 10 }).then(a => console.log(a));
     * ```
     *
     */
    list(params: IKitsuAnimeList, handleError?: IKitsuHandleError): Promise<IKitsuAnime | undefined>;
    /**
     * @method
     * @since 1.3.0
     * @param params - The parameters to find an episode or a list of episodes
     * @description Get an episode with the ID.
     * @returns {Promise<IKitsuEpisode | undefined>} - Return a IKitsuEpisode Promise interface or undefined if it has no result.
     * @example
     * ```js
     * anime.episode(30).then(r => console.log(r.data.attributes.titles.en));
     * ```
     */
    episode(id: number | `${number}`, handleError?: IKitsuHandleError): Promise<IKitsuEpisode | undefined>;
}
export { AnimeKitsu };
export default AnimeKitsu;
